
// Generated from /home/david/code/bool_expr/src/gram.g4 by ANTLR 4.5.3


#include "gramLexer.h"


using namespace antlr4;

using namespace gram;

gramLexer::gramLexer(CharStream *input) : Lexer(input) {
  _interpreter = new atn::LexerATNSimulator(this, _atn, _decisionToDFA, _sharedContextCache);
}

gramLexer::~gramLexer() {
  delete _interpreter;
}

std::string gramLexer::getGrammarFileName() const {
  return "gram.g4";
}

const std::vector<std::string>& gramLexer::getRuleNames() const {
  return _ruleNames;
}

const std::vector<std::string>& gramLexer::getModeNames() const {
  return _modeNames;
}

const std::vector<std::string>& gramLexer::getTokenNames() const {
  return _tokenNames;
}

dfa::Vocabulary& gramLexer::getVocabulary() const {
  return _vocabulary;
}

const std::vector<uint16_t> gramLexer::getSerializedATN() const {
  return _serializedATN;
}

const atn::ATN& gramLexer::getATN() const {
  return _atn;
}




// Static vars and initialization.
std::vector<dfa::DFA> gramLexer::_decisionToDFA;
atn::PredictionContextCache gramLexer::_sharedContextCache;

// We own the ATN which in turn owns the ATN states.
atn::ATN gramLexer::_atn;
std::vector<uint16_t> gramLexer::_serializedATN;

std::vector<std::string> gramLexer::_ruleNames = {
  "TRUE", "FALSE", "OR", "AND", "NOT", "CLOSE_PAREN", "OPEN_PAREN", "WS"
};

std::vector<std::string> gramLexer::_modeNames = {
  "DEFAULT_MODE"
};

std::vector<std::string> gramLexer::_literalNames = {
  "", "'true'", "'false'", "'or'", "'and'", "'not'", "')'", "'('"
};

std::vector<std::string> gramLexer::_symbolicNames = {
  "", "TRUE", "FALSE", "OR", "AND", "NOT", "CLOSE_PAREN", "OPEN_PAREN", 
  "WS"
};

dfa::Vocabulary gramLexer::_vocabulary(_literalNames, _symbolicNames);

std::vector<std::string> gramLexer::_tokenNames;

gramLexer::Initializer::Initializer() {
  // This code could be in a static initializer lambda, but VS doesn't allow access to private class members from there. 
	for (size_t i = 0; i < _symbolicNames.size(); ++i) {
		std::string name = _vocabulary.getLiteralName(i);
		if (name.empty()) {
			name = _vocabulary.getSymbolicName(i);
		}

		if (name.empty()) {
			_tokenNames.push_back("<INVALID>");
		} else {
      _tokenNames.push_back(name);
    }
	}

  _serializedATN = {
    0x3, 0x430, 0xd6d1, 0x8206, 0xad2d, 0x4417, 0xaef1, 0x8d80, 0xaadd, 
    0x2, 0xa, 0x34, 0x8, 0x1, 0x4, 0x2, 0x9, 0x2, 0x4, 0x3, 0x9, 0x3, 0x4, 
    0x4, 0x9, 0x4, 0x4, 0x5, 0x9, 0x5, 0x4, 0x6, 0x9, 0x6, 0x4, 0x7, 0x9, 
    0x7, 0x4, 0x8, 0x9, 0x8, 0x4, 0x9, 0x9, 0x9, 0x3, 0x2, 0x3, 0x2, 0x3, 
    0x2, 0x3, 0x2, 0x3, 0x2, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 
    0x3, 0x3, 0x3, 0x3, 0x4, 0x3, 0x4, 0x3, 0x4, 0x3, 0x5, 0x3, 0x5, 0x3, 
    0x5, 0x3, 0x5, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x7, 0x3, 
    0x7, 0x3, 0x8, 0x3, 0x8, 0x3, 0x9, 0x6, 0x9, 0x2f, 0xa, 0x9, 0xd, 0x9, 
    0xe, 0x9, 0x30, 0x3, 0x9, 0x3, 0x9, 0x2, 0x2, 0xa, 0x3, 0x3, 0x5, 0x4, 
    0x7, 0x5, 0x9, 0x6, 0xb, 0x7, 0xd, 0x8, 0xf, 0x9, 0x11, 0xa, 0x3, 0x2, 
    0x3, 0x5, 0x2, 0xb, 0xc, 0xf, 0xf, 0x22, 0x22, 0x34, 0x2, 0x3, 0x3, 
    0x2, 0x2, 0x2, 0x2, 0x5, 0x3, 0x2, 0x2, 0x2, 0x2, 0x7, 0x3, 0x2, 0x2, 
    0x2, 0x2, 0x9, 0x3, 0x2, 0x2, 0x2, 0x2, 0xb, 0x3, 0x2, 0x2, 0x2, 0x2, 
    0xd, 0x3, 0x2, 0x2, 0x2, 0x2, 0xf, 0x3, 0x2, 0x2, 0x2, 0x2, 0x11, 0x3, 
    0x2, 0x2, 0x2, 0x3, 0x13, 0x3, 0x2, 0x2, 0x2, 0x5, 0x18, 0x3, 0x2, 0x2, 
    0x2, 0x7, 0x1e, 0x3, 0x2, 0x2, 0x2, 0x9, 0x21, 0x3, 0x2, 0x2, 0x2, 0xb, 
    0x25, 0x3, 0x2, 0x2, 0x2, 0xd, 0x29, 0x3, 0x2, 0x2, 0x2, 0xf, 0x2b, 
    0x3, 0x2, 0x2, 0x2, 0x11, 0x2e, 0x3, 0x2, 0x2, 0x2, 0x13, 0x14, 0x7, 
    0x76, 0x2, 0x2, 0x14, 0x15, 0x7, 0x74, 0x2, 0x2, 0x15, 0x16, 0x7, 0x77, 
    0x2, 0x2, 0x16, 0x17, 0x7, 0x67, 0x2, 0x2, 0x17, 0x4, 0x3, 0x2, 0x2, 
    0x2, 0x18, 0x19, 0x7, 0x68, 0x2, 0x2, 0x19, 0x1a, 0x7, 0x63, 0x2, 0x2, 
    0x1a, 0x1b, 0x7, 0x6e, 0x2, 0x2, 0x1b, 0x1c, 0x7, 0x75, 0x2, 0x2, 0x1c, 
    0x1d, 0x7, 0x67, 0x2, 0x2, 0x1d, 0x6, 0x3, 0x2, 0x2, 0x2, 0x1e, 0x1f, 
    0x7, 0x71, 0x2, 0x2, 0x1f, 0x20, 0x7, 0x74, 0x2, 0x2, 0x20, 0x8, 0x3, 
    0x2, 0x2, 0x2, 0x21, 0x22, 0x7, 0x63, 0x2, 0x2, 0x22, 0x23, 0x7, 0x70, 
    0x2, 0x2, 0x23, 0x24, 0x7, 0x66, 0x2, 0x2, 0x24, 0xa, 0x3, 0x2, 0x2, 
    0x2, 0x25, 0x26, 0x7, 0x70, 0x2, 0x2, 0x26, 0x27, 0x7, 0x71, 0x2, 0x2, 
    0x27, 0x28, 0x7, 0x76, 0x2, 0x2, 0x28, 0xc, 0x3, 0x2, 0x2, 0x2, 0x29, 
    0x2a, 0x7, 0x2b, 0x2, 0x2, 0x2a, 0xe, 0x3, 0x2, 0x2, 0x2, 0x2b, 0x2c, 
    0x7, 0x2a, 0x2, 0x2, 0x2c, 0x10, 0x3, 0x2, 0x2, 0x2, 0x2d, 0x2f, 0x9, 
    0x2, 0x2, 0x2, 0x2e, 0x2d, 0x3, 0x2, 0x2, 0x2, 0x2f, 0x30, 0x3, 0x2, 
    0x2, 0x2, 0x30, 0x2e, 0x3, 0x2, 0x2, 0x2, 0x30, 0x31, 0x3, 0x2, 0x2, 
    0x2, 0x31, 0x32, 0x3, 0x2, 0x2, 0x2, 0x32, 0x33, 0x8, 0x9, 0x2, 0x2, 
    0x33, 0x12, 0x3, 0x2, 0x2, 0x2, 0x4, 0x2, 0x30, 0x3, 0x8, 0x2, 0x2, 
  };

  atn::ATNDeserializer deserializer;
  _atn = deserializer.deserialize(_serializedATN);

  size_t count = _atn.getNumberOfDecisions();
  _decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    _decisionToDFA.emplace_back(_atn.getDecisionState(i), i);
  }
}

gramLexer::Initializer gramLexer::_init;
